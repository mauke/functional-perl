#!/usr/bin/env perl

# Copyright (c) 2015-2021 Christian Jaeger, copying@christianjaeger.ch
# This is free software. See the file COPYING.md that came bundled
# with this file.

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

# find modules from functional-perl working directory (not installed)
use Cwd 'abs_path';
our ($mydir, $myname);

BEGIN {
    my $location = (-l $0) ? abs_path($0) : $0;
    $location =~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname) = ($1, $2);
}
use lib "$mydir/../lib";

use Getopt::Long;
use Chj::xopen qw(xopen_read);
use Chj::xtmpfile;
use Chj::xperlfunc;
use FP::IOStream qw(xfile_replace_lines);
use FP::Weak 'Keep';
use FP::List;
use Chj::xperlfunc 'xlocaltime';
use Chj::TEST;
use Cwd qw(abs_path);

sub usage {
    print STDERR map {"$_\n"} @_ if @_;
    print "$myname [ point | minor | major | [v]X.Y.Z | repl | test ]

  Prepare a new functional-perl release, setting the version number to
  the given version, or incrementing to the next given level (which is
  'point' by default). 'repl' will give a repl, test runs the test
  suite.

";
    exit(@_ ? 1 : 0);
}

our $verbose = 0;
GetOptions(
    "verbose" => \$verbose,
    "help"    => sub {usage},

    #"dry-run" => \$opt_dry,
) or exit 1;
usage unless @ARGV <= 1;

sub parse_version_level ($str) {
    +{ major => 0, minor => 1, point => 2 }->{$str}
}

sub parse_version($str) {
    my @r = $str =~ m/^v?(\d+)\.(\d+)\.(\d+)\z/s
        or die "invalid version number: '$str'";
    \@r
}

sub version_inc ($str, $parsed_level) {
    my $v = parse_version $str;
    $v->[$parsed_level]++;

    # This was written for more generic use (only one dot or none, or
    # an additional underscore but I'm told that's not how dev
    # releases are handled anymore, so that functionality was removed,
    # see Git history):
    my @newv = @$v[0 .. $parsed_level];
    push @newv, 0 while @newv < 3;
    my ($a, $b, $c, @r) = @newv;
    my $s = "$a.$b.$c";
    @r ? "${s}_@r" : $s
}

TEST { version_inc "1.2.4", parse_version_level "major" } '2.0.0';
TEST { version_inc "1.2.4", parse_version_level "minor" } '1.3.0';
TEST { version_inc "1.2.4", parse_version_level "point" } '1.2.5';

sub release ($maybe_version, $maybe_parsed_level) {
    xxsystem "meta/check-hardcoded-perl";

    xxsystem "meta/t-check";

    xxsystem "meta/update-manifest";

    xsystem "git", "commit", "-m", "Update MANIFEST", "MANIFEST";

    xxsystem "meta/update-pod";

    xxsystem "cj-git-status-is-clean";

    my $version;
    {
        my $path = "lib/FunctionalPerl.pm";

        my $cnt = xopen_read($path)->xcontent;

        $cnt =~ s{(\$VERSION\s* = \s*)"([^"]+)"}{
        $1 . '"' . ($version = ($maybe_version //
                                version_inc($2, $maybe_parsed_level))) . '"'
        }sxe
            or die "could not replace \$VERSION in $path";

        my $f = xtmpfile $path;
        $f->xprint($cnt);
        $f->xclose;
        $f->xputback;
    }

    print "Releasing version $version...";

    xfile_replace_lines "Changes", sub {
        my ($lines) = @_;
        my $lt      = xlocaltime;
        my $date    = join("-", $lt->Year, $lt->Mon, $lt->mday);
        Keep($lines)->take(2)
            ->append(cons "$version $date\n    - \n\n", Keep($lines)->drop(2))
    };

    xxsystem "e", "Changes";

    xxsystem "git", "commit", "-a", "-m", "Release $version";

    #xxsystem "git", "tag", "-a", "-m", "release $tag", $tag, "HEAD";

    xxsystem "perl",        "Makefile.PL";
    xxsystem "make",        "test";
    xxsystem "website/gen", "--trap";
    {
        my $outpath = "FunctionalPerl-$version.tar.gz";
        if (-e $outpath) {
            system "mvnumber", $outpath
        }
    }
    {
        # hook into call to gpg
        my $dir = abs_path "$mydir/bin" or die "'$mydir/bin': $!";
        local $ENV{PATH} = "$dir:$ENV{PATH}";
        xxsystem "make", "dist";
    }

    print "OK, ready to go.\n";
}

my ($arg) = @ARGV ? @ARGV : ("point");

if ($arg =~ /\./) {
    release $arg, undef;
} elsif (defined(my $level = parse_version_level $arg)) {
    release undef, $level;
} elsif ($arg eq "repl") {
    require FP::Repl;
    FP::Repl::repl();
} elsif ($arg eq "test") {
    Chj::TEST::run_tests __PACKAGE__;
} else {
    usage "invalid argument"
}
